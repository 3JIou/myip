package main

import (
	"encoding/json"
	"fmt"
	"github.com/alexeyco/simpletable"
	"github.com/swaggo/cli"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

var app = cli.NewApp()

type AutoGenerated struct {
	Country     string `json:"country"`
	CountryCode string `json:"countryCode"`
	Region      string `json:"region"`
	City        string `json:"city"`
	Isp         string `json:"isp"`
	As          string `json:"as"`
	Query       string `json:"query"`
}

func getIPInfo(c *cli.Context) error {
	var httpClient = &http.Client{
		Timeout: 5 * time.Second,
	}
	tab := simpletable.New()
	var url string
	if len(c.Args()) != 0 {
		url = "http://ip-api.com/json/" + c.Args()[0] + "?fields=country,countryCode,region,city,lat,lon,timezone,isp,as,query"
	} else {
		url = "http://ip-api.com/json/?fields=country,countryCode,region,city,lat,lon,timezone,isp,as,query"
	}
	resp, err := httpClient.Get(url)
	defer resp.Body.Close()
	if err == nil {
		body, _ := ioutil.ReadAll(resp.Body)
		var ipInfo *AutoGenerated
		if err = json.Unmarshal(body, &ipInfo); err == nil {
			if c.Bool("short") {
				tab.Header = &simpletable.Header{
					Cells: []*simpletable.Cell{
						{Align: simpletable.AlignCenter, Text: "Query"},
						{Align: simpletable.AlignCenter, Text: "City"},
					},
				}
				r := []*simpletable.Cell{
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.Query)},
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.City)},
				}
				tab.Body.Cells = append(tab.Body.Cells, r)
			} else {
				tab.Header = &simpletable.Header{
					Cells: []*simpletable.Cell{
						{Align: simpletable.AlignCenter, Text: "Query"},
						{Align: simpletable.AlignCenter, Text: "Country"},
						{Align: simpletable.AlignCenter, Text: "Country Code"},
						{Align: simpletable.AlignCenter, Text: "Region"},
						{Align: simpletable.AlignCenter, Text: "City"},
						{Align: simpletable.AlignCenter, Text: "Isp"},
						{Align: simpletable.AlignCenter, Text: "As"},
					},
				}
				r := []*simpletable.Cell{
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.Query)},
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.Country)},
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.CountryCode)},
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.Region)},
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.City)},
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.Isp)},
					{Align: simpletable.AlignLeft, Text: fmt.Sprintf("%s", ipInfo.As)},
				}
				tab.Body.Cells = append(tab.Body.Cells, r)
			}
		} else {
			return err
		}
	} else {
		return err
	}
	tab.SetStyle(simpletable.StyleUnicode)
	fmt.Println(tab.String())
	return nil
}

func main() {
	app.Name = "IP info"
	app.Version = "1.0"
	app.Author = "Dmitriy Vlassov"
	app.Email = "dmitriy@vlassov.kz"
	app.Usage = "Using ip-api.com for getting info about your ip or some another.\r\n"
	app.UsageText = "myip             - info about yourself ip\r\n" +
		"\t myip {{some_ip}} - info about some another ip"
	app.Flags = []cli.Flag{
		cli.BoolFlag{
			Name:  "short, s",
			Usage: "short output",
		},
	}
	app.Action = func(c *cli.Context) {
		if err := getIPInfo(c); err != nil {
			log.Fatal(err)
		}
	}
	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}
